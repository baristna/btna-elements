{"ast":null,"code":"var _jsxFileName = \"/Users/baristna/Projects/tna/elements/dev/src/List.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport const List = ({\n  type,\n  list,\n  cssModule\n}) => {\n  const genList = (type, list) => {\n    return list.map((item, index) => {\n      let nest = null;\n\n      if (item.list) {\n        switch (type) {\n          case 'def':\n            nest = __jsx(\"dd\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 10\n              },\n              __self: this\n            }, genList(type, item.list));\n            break;\n\n          case 'ord':\n            nest = __jsx(\"ol\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 13\n              },\n              __self: this\n            }, genList(type, item.list));\n            break;\n\n          default:\n            nest = __jsx(\"ul\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 16\n              },\n              __self: this\n            }, genList(type, item.list));\n            break;\n        }\n      }\n\n      switch (type) {\n        case 'def':\n          return item.name ? __jsx(\"dt\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }, item.name, nest) : nest;\n\n        default:\n          return item.name ? __jsx(\"li\", {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }, item.name, nest) : nest;\n      }\n    });\n  };\n\n  switch (type) {\n    case 'def':\n      return __jsx(\"dl\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, genList(type, list));\n\n    case 'ord':\n      return __jsx(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, genList(type, list));\n\n    default:\n      return __jsx(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, genList(type, list));\n  }\n};","map":{"version":3,"sources":["/Users/baristna/Projects/tna/elements/dev/src/List.js"],"names":["React","List","type","list","cssModule","genList","map","item","index","nest","name"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAC/C,QAAMC,OAAO,GAAG,CAACH,IAAD,EAAOC,IAAP,KAAgB;AAC9B,WAAOA,IAAI,CAACG,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/B,UAAIC,IAAI,GAAG,IAAX;;AACA,UAAIF,IAAI,CAACJ,IAAT,EAAe;AACb,gBAAQD,IAAR;AACE,eAAK,KAAL;AACEO,YAAAA,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAKJ,OAAO,CAACH,IAAD,EAAOK,IAAI,CAACJ,IAAZ,CAAZ,CAAP;AACA;;AACF,eAAK,KAAL;AACEM,YAAAA,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAKJ,OAAO,CAACH,IAAD,EAAOK,IAAI,CAACJ,IAAZ,CAAZ,CAAP;AACA;;AACF;AACEM,YAAAA,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAKJ,OAAO,CAACH,IAAD,EAAOK,IAAI,CAACJ,IAAZ,CAAZ,CAAP;AACA;AATJ;AAWD;;AAED,cAAQD,IAAR;AACE,aAAK,KAAL;AACE,iBAAOK,IAAI,CAACG,IAAL,GAAY;AAAI,YAAA,GAAG,EAAEF,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiBD,IAAI,CAACG,IAAtB,EAA4BD,IAA5B,CAAZ,GAAqDA,IAA5D;;AACF;AACE,iBAAOF,IAAI,CAACG,IAAL,GAAY;AAAI,YAAA,GAAG,EAAEF,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAiBD,IAAI,CAACG,IAAtB,EAA4BD,IAA5B,CAAZ,GAAqDA,IAA5D;AAJJ;AAMD,KAtBM,CAAP;AAuBD,GAxBD;;AA0BA,UAAQP,IAAR;AACE,SAAK,KAAL;AACE,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKG,OAAO,CAACH,IAAD,EAAOC,IAAP,CAAZ,CAAP;;AACF,SAAK,KAAL;AACE,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKE,OAAO,CAACH,IAAD,EAAOC,IAAP,CAAZ,CAAP;;AACF;AACE,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKE,OAAO,CAACH,IAAD,EAAOC,IAAP,CAAZ,CAAP;AANJ;AAQD,CAnCM","sourcesContent":["import React from 'react'\n\nexport const List = ({type, list, cssModule}) => {\n  const genList = (type, list) => {\n    return list.map((item, index) => {\n      let nest = null\n      if (item.list) {\n        switch (type) {\n          case 'def':\n            nest = <dd>{genList(type, item.list)}</dd>\n            break;\n          case 'ord':\n            nest = <ol>{genList(type, item.list)}</ol>\n            break;\n          default:\n            nest = <ul>{genList(type, item.list)}</ul>\n            break;\n        }\n      }\n\n      switch (type) {\n        case 'def':\n          return item.name ? <dt key={index}>{item.name}{nest}</dt> : nest\n        default:\n          return item.name ? <li key={index}>{item.name}{nest}</li> : nest\n      }\n    })\n  }\n\n  switch (type) {\n    case 'def':\n      return <dl>{genList(type, list)}</dl>\n    case 'ord':\n      return <ol>{genList(type, list)}</ol>\n    default:\n      return <ul>{genList(type, list)}</ul>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
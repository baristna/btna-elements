{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/baristna/Projects/tna/elements/dev/src/Input.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Packages\nimport React, { useState } from 'react'; // Elements\n\nimport { Button } from './'; // Helpers\n\nimport { classes as c } from '@btna/helpers'; // genProps\n\nconst genProps = props => {\n  let {\n    type,\n    name,\n    value,\n    placeholder,\n    readOnly,\n    disabled,\n    widthRaw,\n    width,\n    onKeyPress,\n    onKeyDown,\n    onKeyUp,\n    onChange,\n    refHandle,\n    cssModule\n  } = props; // Gen Props\n\n  const genClass = c([cssModule.input, type != 'textarea'], [cssModule.textarea, type == 'textarea'], [cssModule['width_' + width], width && typeof width === 'string']);\n\n  const genStyles = _objectSpread({}, width && typeof width == 'number' ? {\n    width: width + 'px'\n  } : null, {}, widthRaw ? {\n    width: widthRaw\n  } : null);\n\n  return {\n    className: genClass,\n    style: genStyles,\n    name: name,\n    type: type || text,\n    placeholder: placeholder,\n    defaultValue: value,\n    readOnly: readOnly,\n    disabled: disabled,\n    onKeyPress: onKeyPress,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onChange: onChange,\n    ref: refHandle\n  };\n};\n\nexport const InputWrapper = ({\n  children,\n  label\n}) => {\n  switch (label && label.length > 0) {\n    case true:\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, label), children);\n\n    default:\n      return children;\n  }\n}; // Code\n\nexport const Input = props => {\n  let {\n    0: selectedFiles,\n    1: setSelecedFiles\n  } = useState('');\n\n  const fileInputChange = e => {\n    setSelecedFiles(e.currentTarget.files[0].name);\n  };\n\n  switch (props.type) {\n    case 'file':\n      return __jsx(Button, {\n        className: c(props.cssModule.file),\n        cssModule: props.buttonModule,\n        width: props.width,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, selectedFiles ? (props.textSelected || 'File: ') + selectedFiles : props.text || 'File Upload', __jsx(\"input\", _extends({\n        onChange: e => fileInputChange(e)\n      }, genProps(props), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })));\n\n    case 'textarea':\n      return __jsx(InputWrapper, {\n        label: props.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __jsx(\"textarea\", _extends({}, genProps(props), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })));\n\n    default:\n      return __jsx(InputWrapper, {\n        label: props.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, __jsx(\"input\", _extends({}, genProps(props), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })));\n  }\n};","map":{"version":3,"sources":["/Users/baristna/Projects/tna/elements/dev/src/Input.js"],"names":["React","useState","Button","classes","c","genProps","props","type","name","value","placeholder","readOnly","disabled","widthRaw","width","onKeyPress","onKeyDown","onKeyUp","onChange","refHandle","cssModule","genClass","input","textarea","genStyles","className","style","text","defaultValue","ref","InputWrapper","children","label","length","Input","selectedFiles","setSelecedFiles","fileInputChange","e","currentTarget","files","file","buttonModule","textSelected"],"mappings":"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","sourcesContent":["// Packages\nimport React, { useState } from 'react'\n\n// Elements\nimport { Button } from './'\n\n// Helpers\nimport { classes as c } from '@btna/helpers'\n\n// genProps\nconst genProps = (props) => {\n  let {\n    type,\n    name,\n    value,\n    placeholder,\n    readOnly,\n    disabled,\n\n    widthRaw,\n    width,\n\n    onKeyPress,\n    onKeyDown,\n    onKeyUp,\n    onChange,\n    refHandle,\n    cssModule\n  } = props\n\n  // Gen Props\n  const genClass = c(\n    [cssModule.input, type != 'textarea'],\n    [cssModule.textarea, type == 'textarea'],\n    [cssModule['width_' + width], (width && typeof width === 'string')],\n  )\n\n  const genStyles = {\n    ...(width && (typeof width == 'number') ? {width : width + 'px'} : null),\n    ...(widthRaw ? {width : widthRaw } : null),\n  }\n\n  return {\n    className: genClass,\n    style: genStyles,\n    name: name,\n    type:type || text,\n    placeholder:placeholder,\n    defaultValue:value,\n    readOnly:readOnly,\n    disabled:disabled,\n    onKeyPress:onKeyPress,\n    onKeyDown:onKeyDown,\n    onKeyUp:onKeyUp,\n    onChange:onChange,\n    ref:refHandle\n  }\n}\n\nexport const InputWrapper = ({children, label}) => {\n  switch (label && label.length > 0) {\n    case true:\n      return <div>\n        <div>{label}</div>\n        {children}\n      </div>\n  \n    default:\n      return children\n  }\n}\n\n// Code\nexport const Input = (props) => {\n  let [selectedFiles, setSelecedFiles] = useState('')\n\n  const fileInputChange = (e) => {\n    setSelecedFiles(e.currentTarget.files[0].name)\n  }\n\n  switch (props.type) {\n    case 'file':\n      return (\n        <Button className={c(props.cssModule.file)} cssModule={props.buttonModule} width={props.width}>\n          {selectedFiles ? (props.textSelected || 'File: ') + selectedFiles : (props.text || 'File Upload') }\n          <input\n            onChange={(e) => fileInputChange(e) }\n            {...genProps(props)}\n          />\n        </Button>\n      )\n    case 'textarea':\n      return <InputWrapper label={props.label}><textarea {...genProps(props)} /></InputWrapper>\n    default:\n      return (\n        <InputWrapper label={props.label}><input {...genProps(props)} /></InputWrapper>\n      )\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
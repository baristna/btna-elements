{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/baristna/Projects/tna/elements/dev/elements/Select.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Select } from '../src';\nimport sSelect from '../scss/Select.scss';\nimport sIcons from '@btna/styles/icons.scss';\nexport const SelectComponent = React.forwardRef((props, ref) => __jsx(Select, _extends({\n  cssModule: sSelect,\n  iconModule: sIcons\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}))); // // Styles\n// import s from './Select.scss'\n// import { sIcons  } from '../sass'\n// // Packages\n// import { createRef, useState, useEffect } from 'react'\n// // Hooks\n// import { useOutsideClick } from '../hooks'\n// // Helpers\n// import { classes as c } from '@btna/helpers'\n// export const Select = (props) => {\n//   let { options, custom } = props\n//   let selectElement = createRef()\n//   let customMenu = createRef()\n//   let [selectedOption, setSelectedOption] = useState('please select')\n//   let [selectedIndex, setSelectedIndex] = useState(0)\n//   let [customMenuOpen, setCustomMenuOpen] = useState(false)\n//   // Handle Outside Click to Close custom menu\n//   useOutsideClick(customMenu, () => {\n//     setCustomMenuOpen(false)\n//   })\n//   // Run once to get selectedIndex to component\n//   useEffect(() => {\n//     setSelectedIndex(selectElement.current.selectedIndex)\n//   }, [])\n//   // Run everytime selectedIndex has changed\n//   useEffect(() => {\n//     let currentOptions = selectElement.current.options\n//     if (selectedIndex >= 0) {\n//       setSelectedOption(currentOptions[selectedIndex].text)\n//     }\n//   }, [selectedIndex])\n//   // Get selected index from native element\n//   const handleNativeOnChange = (e) => {\n//     setSelectedIndex(e.currentTarget.selectedIndex)\n//   }\n//   // Get selected index from custom option and set to relevant places\n//   const handleCustomOptionClick = (index) => {\n//     setSelectedIndex(index)\n//     selectElement.current.selectedIndex = index\n//   }\n//   // Menu Toggle\n//   const handleCustomMenuClick = () => {\n//     setCustomMenuOpen(!customMenuOpen)\n//   }\n//   // Generate options\n//   const genOptions = () => {\n//     return options.map((item, index) => {\n//       return <option key={index} value={item.value}>{item.name}</option>\n//     })\n//   }\n//   // Generate custom options\n//   const genCustomOptions = () => {\n//     return options.map((item, index) => {\n//       return <div\n//         key={index}\n//         className={s.option}\n//         onClick={() => { handleCustomOptionClick(index) }}\n//       >\n//         {item.name}\n//       </div>\n//     })\n//   }\n//   // Render\n//   return (\n//     <div className={c(s.select, [s.custom, custom])} onClick={() => handleCustomMenuClick() }>\n//       <div className={s.label}>{selectedOption}</div>\n//       <i className={c(sIcons['arrow_drop_down'], s.icon)} />\n//       <select ref={selectElement} onChange={e => handleNativeOnChange(e) }>\n//         {genOptions()}\n//       </select>\n//       { custom && customMenuOpen &&\n//         <div className={s.options} ref={customMenu}>\n//           {genCustomOptions()}\n//         </div>\n//       }\n//     </div>\n//   )\n// }","map":{"version":3,"sources":["/Users/baristna/Projects/tna/elements/dev/elements/Select.js"],"names":["Select","sSelect","sIcons","SelectComponent","React","forwardRef","props","ref"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAO,MAAMC,eAAe,GAAGC,KAAK,CAACC,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAC9C,MAAC,MAAD;AAAQ,EAAA,SAAS,EAAEN,OAAnB;AAA4B,EAAA,UAAU,EAAEC;AAAxC,GAAoDI,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAD6B,CAAxB,C,CAOP;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Select } from '../src'\nimport sSelect from '../scss/Select.scss'\nimport sIcons from '@btna/styles/icons.scss'\n\nexport const SelectComponent = React.forwardRef((props, ref) => (\n  <Select cssModule={sSelect} iconModule={sIcons} {...props} />\n))\n\n\n\n\n// // Styles\n// import s from './Select.scss'\n// import { sIcons  } from '../sass'\n\n// // Packages\n// import { createRef, useState, useEffect } from 'react'\n\n// // Hooks\n// import { useOutsideClick } from '../hooks'\n\n// // Helpers\n// import { classes as c } from '@btna/helpers'\n\n// export const Select = (props) => {\n//   let { options, custom } = props\n//   let selectElement = createRef()\n//   let customMenu = createRef()\n//   let [selectedOption, setSelectedOption] = useState('please select')\n//   let [selectedIndex, setSelectedIndex] = useState(0)\n//   let [customMenuOpen, setCustomMenuOpen] = useState(false)\n\n//   // Handle Outside Click to Close custom menu\n//   useOutsideClick(customMenu, () => {\n//     setCustomMenuOpen(false)\n//   })\n\n//   // Run once to get selectedIndex to component\n//   useEffect(() => {\n//     setSelectedIndex(selectElement.current.selectedIndex)\n//   }, [])\n\n//   // Run everytime selectedIndex has changed\n//   useEffect(() => {\n//     let currentOptions = selectElement.current.options\n//     if (selectedIndex >= 0) {\n//       setSelectedOption(currentOptions[selectedIndex].text)\n//     }\n//   }, [selectedIndex])\n\n//   // Get selected index from native element\n//   const handleNativeOnChange = (e) => {\n//     setSelectedIndex(e.currentTarget.selectedIndex)\n//   }\n\n//   // Get selected index from custom option and set to relevant places\n//   const handleCustomOptionClick = (index) => {\n//     setSelectedIndex(index)\n//     selectElement.current.selectedIndex = index\n//   }\n\n//   // Menu Toggle\n//   const handleCustomMenuClick = () => {\n//     setCustomMenuOpen(!customMenuOpen)\n//   }\n\n//   // Generate options\n//   const genOptions = () => {\n//     return options.map((item, index) => {\n//       return <option key={index} value={item.value}>{item.name}</option>\n//     })\n//   }\n\n//   // Generate custom options\n//   const genCustomOptions = () => {\n//     return options.map((item, index) => {\n//       return <div\n//         key={index}\n//         className={s.option}\n//         onClick={() => { handleCustomOptionClick(index) }}\n//       >\n//         {item.name}\n//       </div>\n//     })\n//   }\n\n//   // Render\n//   return (\n//     <div className={c(s.select, [s.custom, custom])} onClick={() => handleCustomMenuClick() }>\n//       <div className={s.label}>{selectedOption}</div>\n//       <i className={c(sIcons['arrow_drop_down'], s.icon)} />\n\n//       <select ref={selectElement} onChange={e => handleNativeOnChange(e) }>\n//         {genOptions()}\n//       </select>\n\n//       { custom && customMenuOpen &&\n//         <div className={s.options} ref={customMenu}>\n//           {genCustomOptions()}\n//         </div>\n//       }\n//     </div>\n//   )\n// }\n"]},"metadata":{},"sourceType":"module"}
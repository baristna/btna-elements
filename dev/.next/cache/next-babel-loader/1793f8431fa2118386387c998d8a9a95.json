{"ast":null,"code":"var _jsxFileName = \"/Users/baristna/Projects/tna/elements/dev/src/Checkbox.js\";\nvar __jsx = React.createElement;\n// Packages\nimport React, { createRef, useState, useEffect } from 'react'; // Hooks\n\nimport { useCheckboxChange } from '@btna/hooks'; // Helpers\n\nimport { classes as c } from '@btna/helpers';\nexport const Checkbox = props => {\n  let {\n    id,\n    children,\n    center,\n    hover,\n    defaultChecked,\n    cssModule,\n    iconModule\n  } = props;\n  let nativeInput = createRef();\n  let {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(false);\n  useEffect(() => {\n    setIsChecked(nativeInput.current.checked);\n  }, []); // Handle radio change with same name\n\n  useCheckboxChange(nativeInput, () => {\n    setIsChecked(nativeInput.current.checked);\n  }); // Render\n\n  return __jsx(\"div\", {\n    className: c(cssModule.checkbox, [cssModule.hover, hover]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: c(cssModule.box, [cssModule.center, center]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, isChecked && iconModule && __jsx(\"i\", {\n    className: c(iconModule['check'], cssModule.check),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    className: cssModule.label,\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, children), __jsx(\"input\", {\n    className: cssModule.native,\n    type: \"checkbox\",\n    id: id,\n    ref: nativeInput,\n    defaultChecked: defaultChecked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/baristna/Projects/tna/elements/dev/src/Checkbox.js"],"names":["React","createRef","useState","useEffect","useCheckboxChange","classes","c","Checkbox","props","id","children","center","hover","defaultChecked","cssModule","iconModule","nativeInput","isChecked","setIsChecked","current","checked","checkbox","box","check","label","native"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,aAAlC,C,CAEA;;AACA,SACEC,OAAO,IAAIC,CADb,QAEO,eAFP;AAIA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACjC,MAAI;AACFC,IAAAA,EADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,cALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA;AAPE,MAQAP,KARJ;AAUA,MAAIQ,WAAW,GAAGf,SAAS,EAA3B;AACA,MAAI;AAAA,OAACgB,SAAD;AAAA,OAAYC;AAAZ,MAA4BhB,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,YAAY,CAACF,WAAW,CAACG,OAAZ,CAAoBC,OAArB,CAAZ;AACD,GAFQ,EAEN,EAFM,CAAT,CAdiC,CAkBjC;;AACAhB,EAAAA,iBAAiB,CAACY,WAAD,EAAc,MAAM;AACnCE,IAAAA,YAAY,CAACF,WAAW,CAACG,OAAZ,CAAoBC,OAArB,CAAZ;AACD,GAFgB,CAAjB,CAnBiC,CAuBjC;;AACA,SACE;AAAK,IAAA,SAAS,EAAEd,CAAC,CAACQ,SAAS,CAACO,QAAX,EAAqB,CAACP,SAAS,CAACF,KAAX,EAAkBA,KAAlB,CAArB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEN,CAAC,CAACQ,SAAS,CAACQ,GAAX,EAAgB,CAACR,SAAS,CAACH,MAAX,EAAmBA,MAAnB,CAAhB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIM,SAAS,IAAIF,UAAb,IAA2B;AAAG,IAAA,SAAS,EAAET,CAAC,CAACS,UAAU,CAAC,OAAD,CAAX,EAAsBD,SAAS,CAACS,KAAhC,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD/B,CADF,EAIE;AAAO,IAAA,SAAS,EAAET,SAAS,CAACU,KAA5B;AAAmC,IAAA,OAAO,EAAEf,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiDC,QAAjD,CAJF,EAKE;AACE,IAAA,SAAS,EAAEI,SAAS,CAACW,MADvB;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,EAAE,EAAEhB,EAHN;AAIE,IAAA,GAAG,EAAEO,WAJP;AAKE,IAAA,cAAc,EAAEH,cALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AAeD,CAvCM","sourcesContent":["// Packages\nimport React, { createRef, useState, useEffect } from 'react'\n\n// Hooks\nimport { useCheckboxChange } from '@btna/hooks'\n\n// Helpers\nimport {\n  classes as c\n} from '@btna/helpers'\n\nexport const Checkbox = (props) => {\n  let {\n    id,\n    children,\n    center,\n    hover,\n    defaultChecked,\n    cssModule,\n    iconModule\n  } = props\n\n  let nativeInput = createRef()\n  let [isChecked, setIsChecked] = useState(false)\n\n  useEffect(() => {\n    setIsChecked(nativeInput.current.checked)\n  }, [])\n\n  // Handle radio change with same name\n  useCheckboxChange(nativeInput, () => {\n    setIsChecked(nativeInput.current.checked)\n  })\n\n  // Render\n  return (\n    <div className={c(cssModule.checkbox, [cssModule.hover, hover])}>\n      <div className={c(cssModule.box, [cssModule.center, center])}>\n        { isChecked && iconModule && <i className={c(iconModule['check'], cssModule.check)} />}\n      </div>\n      <label className={cssModule.label} htmlFor={id}>{children}</label>\n      <input\n        className={cssModule.native}\n        type='checkbox'\n        id={id}\n        ref={nativeInput}\n        defaultChecked={defaultChecked}\n      />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
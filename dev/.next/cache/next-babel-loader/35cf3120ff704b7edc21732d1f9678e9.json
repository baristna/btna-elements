{"ast":null,"code":"var _jsxFileName = \"/Users/baristna/Projects/tna/elements/dev/src/Select.js\";\nvar __jsx = React.createElement;\n// Packages\nimport React, { createRef, useState, useEffect } from 'react'; // Hooks\n\nimport { useOutsideClick } from '@btna/hooks'; // Helpers\n\nimport { classes as c } from '@btna/helpers';\nexport var Select = React.forwardRef(function (props, ref) {\n  var options = props.options,\n      custom = props.custom;\n  var selectElement = createRef();\n  var customMenu = createRef();\n\n  var _useState = useState('please select'),\n      selectedOption = _useState[0],\n      setSelectedOption = _useState[1];\n\n  var _useState2 = useState(0),\n      selectedIndex = _useState2[0],\n      setSelectedIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      customMenuOpen = _useState3[0],\n      setCustomMenuOpen = _useState3[1]; // Handle Outside Click to Close custom menu\n\n\n  useOutsideClick(customMenu, function () {\n    setCustomMenuOpen(false);\n  }); // Run once to get selectedIndex to component\n\n  useEffect(function () {\n    setSelectedIndex(selectElement.current.selectedIndex);\n  }, []); // Run everytime selectedIndex has changed\n\n  useEffect(function () {\n    var currentOptions = selectElement.current.options;\n\n    if (selectedIndex >= 0) {\n      setSelectedOption(currentOptions[selectedIndex].text);\n    }\n  }, [selectedIndex]); // Get selected index from native element\n\n  var handleNativeOnChange = function handleNativeOnChange(e) {\n    setSelectedIndex(e.currentTarget.selectedIndex);\n  }; // Get selected index from custom option and set to relevant places\n\n\n  var handleCustomOptionClick = function handleCustomOptionClick(index) {\n    setSelectedIndex(index);\n    selectElement.current.selectedIndex = index;\n  }; // Menu Toggle\n\n\n  var handleCustomMenuClick = function handleCustomMenuClick() {\n    setCustomMenuOpen(!customMenuOpen);\n  }; // Generate options\n\n\n  var genOptions = function genOptions() {\n    return options.map(function (item, index) {\n      return __jsx(\"option\", {\n        key: index,\n        value: item.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, item.name);\n    });\n  }; // Generate custom options\n\n\n  var genCustomOptions = function genCustomOptions() {\n    return options.map(function (item, index) {\n      return __jsx(\"div\", {\n        key: index,\n        className: props.cssModule.option,\n        onClick: function onClick() {\n          handleCustomOptionClick(index);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, item.name);\n    });\n  }; // Render\n\n\n  return __jsx(\"div\", {\n    className: c(props.cssModule.select, [props.cssModule.custom, custom]),\n    onClick: function onClick() {\n      return handleCustomMenuClick();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: props.cssModule.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, selectedOption), __jsx(\"i\", {\n    className: c(props.iconModule['arrow_drop_down'], props.cssModule.icon),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), __jsx(\"select\", {\n    ref: selectElement,\n    onChange: function onChange(e) {\n      return handleNativeOnChange(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, genOptions()), custom && customMenuOpen && __jsx(\"div\", {\n    className: props.cssModule.options,\n    ref: customMenu,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, genCustomOptions()));\n});","map":{"version":3,"sources":["/Users/baristna/Projects/tna/elements/dev/src/Select.js"],"names":["React","createRef","useState","useEffect","useOutsideClick","classes","c","Select","forwardRef","props","ref","options","custom","selectElement","customMenu","selectedOption","setSelectedOption","selectedIndex","setSelectedIndex","customMenuOpen","setCustomMenuOpen","current","currentOptions","text","handleNativeOnChange","e","currentTarget","handleCustomOptionClick","index","handleCustomMenuClick","genOptions","map","item","value","name","genCustomOptions","cssModule","option","select","label","iconModule","icon"],"mappings":"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","sourcesContent":["// Packages\nimport React, { createRef, useState, useEffect } from 'react'\n\n// Hooks\nimport { useOutsideClick } from '@btna/hooks'\n\n// Helpers\nimport { classes as c } from '@btna/helpers'\n\nexport const Select =  React.forwardRef((props, ref) => {\n  let { options, custom } = props\n  let selectElement = createRef()\n  let customMenu = createRef()\n  let [selectedOption, setSelectedOption] = useState('please select')\n  let [selectedIndex, setSelectedIndex] = useState(0)\n  let [customMenuOpen, setCustomMenuOpen] = useState(false)\n\n  // Handle Outside Click to Close custom menu\n  useOutsideClick(customMenu, () => {\n    setCustomMenuOpen(false)\n  })\n\n  // Run once to get selectedIndex to component\n  useEffect(() => {\n    setSelectedIndex(selectElement.current.selectedIndex)\n  }, [])\n\n  // Run everytime selectedIndex has changed\n  useEffect(() => {\n    let currentOptions = selectElement.current.options\n    if (selectedIndex >= 0) {\n      setSelectedOption(currentOptions[selectedIndex].text)\n    }\n  }, [selectedIndex])\n\n  // Get selected index from native element\n  const handleNativeOnChange = (e) => {\n    setSelectedIndex(e.currentTarget.selectedIndex)\n  }\n\n  // Get selected index from custom option and set to relevant places\n  const handleCustomOptionClick = (index) => {\n    setSelectedIndex(index)\n    selectElement.current.selectedIndex = index\n  }\n\n  // Menu Toggle\n  const handleCustomMenuClick = () => {\n    setCustomMenuOpen(!customMenuOpen)\n  }\n\n  // Generate options\n  const genOptions = () => {\n    return options.map((item, index) => {\n      return <option key={index} value={item.value}>{item.name}</option>\n    })\n  }\n\n  // Generate custom options\n  const genCustomOptions = () => {\n    return options.map((item, index) => {\n      return <div\n        key={index}\n        className={props.cssModule.option}\n        onClick={() => { handleCustomOptionClick(index) }}\n      >\n        {item.name}\n      </div>\n    })\n  }\n\n  // Render\n  return (\n    <div className={c(props.cssModule.select, [props.cssModule.custom, custom])} onClick={() => handleCustomMenuClick() }>\n      <div className={props.cssModule.label}>{selectedOption}</div>\n      <i className={c(props.iconModule['arrow_drop_down'], props.cssModule.icon)} />\n\n      <select ref={selectElement} onChange={e => handleNativeOnChange(e) }>\n        {genOptions()}\n      </select>\n\n      { custom && customMenuOpen &&\n        <div className={props.cssModule.options} ref={customMenu}>\n          {genCustomOptions()}\n        </div>\n      }\n    </div>\n  )\n})\n"]},"metadata":{},"sourceType":"module"}